// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package link_shortener

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ShortenerClient is the client API for Shortener service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShortenerClient interface {
	SaveOriginal(ctx context.Context, in *SaveOriginalRequest, opts ...grpc.CallOption) (*SaveOriginalResponse, error)
	GetOriginal(ctx context.Context, in *GetOriginalRequest, opts ...grpc.CallOption) (*GetOriginalResponse, error)
}

type shortenerClient struct {
	cc grpc.ClientConnInterface
}

func NewShortenerClient(cc grpc.ClientConnInterface) ShortenerClient {
	return &shortenerClient{cc}
}

func (c *shortenerClient) SaveOriginal(ctx context.Context, in *SaveOriginalRequest, opts ...grpc.CallOption) (*SaveOriginalResponse, error) {
	out := new(SaveOriginalResponse)
	err := c.cc.Invoke(ctx, "/api.Shortener/SaveOriginal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) GetOriginal(ctx context.Context, in *GetOriginalRequest, opts ...grpc.CallOption) (*GetOriginalResponse, error) {
	out := new(GetOriginalResponse)
	err := c.cc.Invoke(ctx, "/api.Shortener/GetOriginal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShortenerServer is the server API for Shortener service.
// All implementations must embed UnimplementedShortenerServer
// for forward compatibility
type ShortenerServer interface {
	SaveOriginal(context.Context, *SaveOriginalRequest) (*SaveOriginalResponse, error)
	GetOriginal(context.Context, *GetOriginalRequest) (*GetOriginalResponse, error)
	mustEmbedUnimplementedShortenerServer()
}

// UnimplementedShortenerServer must be embedded to have forward compatible implementations.
type UnimplementedShortenerServer struct {
}

func (UnimplementedShortenerServer) SaveOriginal(context.Context, *SaveOriginalRequest) (*SaveOriginalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveOriginal not implemented")
}
func (UnimplementedShortenerServer) GetOriginal(context.Context, *GetOriginalRequest) (*GetOriginalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOriginal not implemented")
}
func (UnimplementedShortenerServer) mustEmbedUnimplementedShortenerServer() {}

// UnsafeShortenerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShortenerServer will
// result in compilation errors.
type UnsafeShortenerServer interface {
	mustEmbedUnimplementedShortenerServer()
}

func RegisterShortenerServer(s *grpc.Server, srv ShortenerServer) {
	s.RegisterService(&_Shortener_serviceDesc, srv)
}

func _Shortener_SaveOriginal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveOriginalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).SaveOriginal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Shortener/SaveOriginal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).SaveOriginal(ctx, req.(*SaveOriginalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_GetOriginal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOriginalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).GetOriginal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Shortener/GetOriginal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).GetOriginal(ctx, req.(*GetOriginalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Shortener_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Shortener",
	HandlerType: (*ShortenerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveOriginal",
			Handler:    _Shortener_SaveOriginal_Handler,
		},
		{
			MethodName: "GetOriginal",
			Handler:    _Shortener_GetOriginal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/shortener.proto",
}
